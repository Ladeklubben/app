name: Build App for iOS
description: Build Capacitor app for iOS and upload to TestFlight

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build the web assets
      - name: Build web assets
        run: export MODE=prod && npm run build

      # Install Capacitor CLI
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # Setup Xcode
      - name: Setup Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          xcodebuild -version

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          gem install cocoapods
          pod --version

      # Sync iOS
      - name: Sync iOS
        run: |
          npx cap sync ios
          cd ios/App
          pod install

      # Install Fastlane
      - name: Install Fastlane
        run: |
          gem install fastlane
          fastlane --version

      # Setup Apple Certificates
      - name: Install Apple Distribution Certificate
        env:
          IOS_DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          echo "$IOS_DISTRIBUTION_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import certificate.p12 -k build.keychain -P "$IOS_DISTRIBUTION_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "build" build.keychain
          rm certificate.p12

      # Setup Provisioning Profile
      - name: Install Provisioning Profile
        id: install-provisioning-profile
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_PATH"
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision "$PROFILE_PATH/$UUID.mobileprovision"
          ls -l "$PROFILE_PATH"
          echo "profile-uuid=$UUID" >> $GITHUB_OUTPUT
          rm profile.mobileprovision

      # Build and Archive iOS
      - name: Build and Archive iOS
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release \
            -sdk iphoneos \
            -archivePath build/App.xcarchive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="Ladeklubben App Store Profile" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            archive
        env:
          UUID: ${{ steps.install-provisioning-profile.outputs.profile-uuid }}

      # Export IPA
      - name: Export IPA
        run: |
          cd ios/App
          xcodebuild -exportArchive -archivePath build/App.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build
        env:
          EXPORT_OPTIONS_PLIST: |
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
            </dict>
            </plist>

      # Upload to TestFlight
      - name: Upload to TestFlight
        run: |
          cd ios/App
          fastlane deliver \
            --ipa build/App.ipa \
            --username ${{ secrets.APPLE_ID }} \
            --app_identifier ${{ secrets.APP_BUNDLE_ID }} \
            --api_key_path api_key.json \
            --skip_metadata true \
            --skip_screenshots true \
            --force true
        env:
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        continue-on-error: true # Optional: Allows workflow to continue if upload fails

      # Upload iOS artifact
      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/App/build/App.ipa