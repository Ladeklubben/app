name: Build App for iOS
description: Build Capacitor app for iOS and upload to TestFlight

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14 # As recommended by the guide for stability

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build the web assets
      - name: Build web assets
        run: npm run build
        env:
          MODE: prod

      # Install Capacitor CLI
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # Sync iOS
      - name: Sync iOS
        run: |
          npx cap sync ios

      # Install Ruby and Fastlane
      - name: Install Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # As per the guide
          bundler-cache: true
        run: |
          gem install fastlane
          fastlane --version

      # Setup Apple Certificates
      - name: Install Apple Distribution Certificate
        env:
          IOS_DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          echo "$IOS_DISTRIBUTION_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import certificate.p12 -k build.keychain -P "$IOS_DISTRIBUTION_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "build" build.keychain
          rm certificate.p12

      # Setup Provisioning Profile
      - name: Install Provisioning Profile
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_PATH"
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision "$PROFILE_PATH/$UUID.mobileprovision"
          rm profile.mobileprovision

      # Create Fastlane configuration
      - name: Create Fastlane configuration
        run: |
          mkdir -p ios/App/fastlane
          cat > ios/App/fastlane/Fastfile << 'EOF'
          default_platform(:ios)

          platform :ios do
            lane :build do
              setup_ci
              match(
                type: "appstore",
                readonly: true,
                keychain_name: "build.keychain",
                keychain_password: "build"
              )
              gym(
                workspace: "ios/App/App.xcworkspace",
                scheme: "App",
                export_method: "app-store",
                configuration: "Release",
                output_directory: "build",
                output_name: "App.ipa",
                export_options: {
                  provisioningProfiles: {
                    "${{ secrets.APP_BUNDLE_ID }}" => "Ladeklubben App Store Profile"
                  },
                  signingStyle: "manual",
                  teamID: "${{ secrets.APPLE_TEAM_ID }}"
                }
              )
            end

            lane :release do
              build
              deliver(
                skip_metadata: true,
                skip_screenshots: true,
                force: true,
                app_identifier: "${{ secrets.APP_BUNDLE_ID }}",
                ipa: "build/App.ipa"
              )
            end
          end
          EOF
          cat > ios/App/fastlane/Appfile << 'EOF'
          app_identifier("${{ secrets.APP_BUNDLE_ID }}")
          apple_id("${{ secrets.APPLE_ID }}")
          team_id("${{ secrets.APPLE_TEAM_ID }}")
          EOF
          cat > ios/App/fastlane/.env << 'EOF'
          FASTLANE_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          FASTLANE_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          FASTLANE_KEY="${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}"
          EOF

      # Run Fastlane to build and upload to TestFlight
      - name: Build and Upload to TestFlight
        run: |
          cd ios/App
          fastlane release
        env:
          FASTLANE_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        continue-on-error: true # Optional: Allows workflow to continue if upload fails

      # Upload iOS artifact
      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/App/build/App.ipa